@model Board 
@using Newtonsoft.Json;
@{
	
}
<div class="main">
	<div class="head">
		<h1 class="text-start">
            @Model.Height x @Model.Width

        </h1>
        <h1 id="total-mines">total mines </h1>
        <h1 id="timer">timer</h1>
	</div>
    <div class="body-container mt-5">
        <div class="grid-container" style="grid-template-columns: repeat(@Model.Width, 30px); grid-template-rows: repeat(@Model.Height, 30px);">
            @for (int i = 0; i < Model.Width; i++) {
                @for (int j = 0; j < Model.Height; j++) {
                    <div class="grid-item closed"></div>
                }
            }
        </div>
    </div>
	
	<div class="grid-foot row">
        <a asp-controller="Game" asp-action="Index" class="btn btn-primary mt-5 bg-dark w-25 mx-auto">Go Back</a>
    </div>

	<script>
        var gridItems = document.querySelectorAll(".grid-item");
        var board = @Html.Raw(JsonConvert.SerializeObject(Model.BoardArr));
        var width = board[0].length;
        console.log(board);

        // 2d array that store the cell that needs to be checked if it blank
        var clickCounter = 0
        var cellsToBeOpened = null;

        // a flag list that contain the pos x,y of the user
        var flagsCoordList = [];


        function click() {
            gridItems.forEach((gridItem, index) => {
                gridItem.addEventListener("click", function() {
                    var x = Math.floor(index / width);
                    var y = index % width;
                    clickCounter++;
                    console.log("clicks = " ,clickCounter);

                    // first click
                    if (clickCounter == 1) {
                        // Send the (x, y) to backend using fetch
                        fetch('/Game/FirstClick', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ x: x, y: y }) // Send x, y as a JSON object
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Success:', data);
                            openBlank(data);
                            startTimer();
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });

                    } else {
                        // normal click
                        fetch('/Game/Click', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ x: x, y: y }) // Send x, y as a JSON object
                        })
                        .then(response => response.json())
                        .then(data => {
                            console.log('Success:', data);
                            openBlank(data);
                        })
                        .catch((error) => {
                            console.error('Error:', error);
                        });
                    }
                })
            })
        }
        function openBlank(cellsToBeOpened) {
            console.log(cellsToBeOpened)
            // Convert to a list of indices (1D array) that need to be opened
            
            gridItems.forEach((gridItem, index) => {
                cellsToBeOpened.forEach((cell) => {
                   if(cell.key[0] * @Model.Width + cell.key[1] == index) {
                        if (cell.value == @Model.getLandminesInt()) {
                            gridItem.classList.add("mine");
                        } else if (cell.value == 0) {
                            gridItem.classList.add("opened");
                        } else {
                            gridItem.classList.add("opened");
                            gridItem.innerHTML = cell.value;
                        }
                   }
                });
            })
        }
        
        function rightClick() {
            gridItems.forEach((gridItem, index) => {
                
                gridItem.addEventListener('contextmenu', function(event) {
                    var x = Math.floor(index / width);
                    var y = index % width;
                    //console.log("x =" x, "y = " y);


                    event.preventDefault();
                    const flag = gridItem.querySelector(".flag");
                    if (flag) {
                        
                        flag.remove(); // Remove the icon if it exists
                        // Find the index of the (x, y) pair in the coordinates list
                        const coordIndex = flagsCoordList.findIndex(coord => coord.x === x && coord.y === y);

                        // Remove the (x, y) pair from the list
                        if (coordIndex !== -1) {
                            flagsCoordList.splice(coordIndex, 1);
                        }
                        totalBomb++;
                        display();
                    } else {
                        // if total Bomb <= 0 cant add more flag or reduce more bomb
                        if (totalBomb < 1) return;
                        // Re-add the icon if it's not present
                        const newIcon = document.createElement('i');
                        newIcon.className = 'fa-solid fa-flag flag';
                        gridItem.appendChild(newIcon);

                        flagsCoordList.push({ x: x, y: y });
                        // update bomb and update display
                        totalBomb--;
                        display();
                    }

                    console.log(flagsCoordList);
                })
            })
        }
        // get the total number of bombs
        var totalBomb;
        function getTotalMines() {
            fetch('/Game/GetTotalMines', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                }
            })
            .then(response => response.json())
            .then(data => {
                console.log('Success bomb:', data);
                totalBomb = data;
                display();
            })
            .catch((error) => {
                console.error('Error:', error);
            });
        }
        function display() {
            let bombDisplay = document.querySelector("#total-mines");
            bombDisplay.innerHTML = `<span>${totalBomb} <i class="fa-solid fa-bomb"></i></span>`
        }
        // get all the bombs (its pos) from backend if lose

        var timer;
        var playTime;
        var time;
        function startTimer(){
            playTime = 0;
            timer = setInterval(function(){
                playTime++;
                document.getElementById("timer").textContent = timeConversion_1(playTime);
            }, 1000)
        }
        function timeConversion_1(time) {
            if (time < 10) {
                return "00" + time;
            } else if (time < 100 && time > 9) {
                return "0" + time;
            } else {
                return time;
            }
        }

        function timeConversion_2(time) {
            let minutes= Math.floor(time / 60);
            if (minutes < 10) minutes = "0" + minutes;
            let seconds = time % 60;
            if (seconds < 10) seconds = "0" + seconds;
            return minutes + ":" + seconds;
        }

        // call function

        getTotalMines();
        click();
        rightClick();
        
    </script>
</div>


